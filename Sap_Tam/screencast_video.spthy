/*
 *  Author: Devansh Chandak
 *  Model Name: 
 *  Status: DEVELOPMENTAL
 *
 *  Comments:
 */

theory screencast
begin

builtins: diffie-hellman

rule create_identities:
	let 
		pubkey = 'g'^~privkey
	in 									//generate private key randomly
	[Fr(~privkey)]--> [!Identity($A, ~privkey, pubkey), Out(pubkey)]  // everything out is visible to adversary
// dont care how A comes from $ sign says not to worry about it==can be client/server/alice/bob
// can have multiple times...example one for server , one for client (even for same client
//) twice which is a problem which u conquer with restricitons
/*
rule receiving_pubkey:
	[In(a)]-->[blah blah blah]

*/
rule client_hello:
	[!Identity($client, ~clientprivkey, clientpubkey), !Identity($server, ~serverprivkey, serverpubkey)]
	-->
	[Out(<'client_hello', $client, $server, clientpubkey>)]  //from client to server the client pub key
//nameof message:clienthello  
//idneitity will get erase the premise so put ! for persistent fact --not to erase

rule receive_client_hello_send_server_hello:
	let 
		sessionkey = clientpubkey^~serverprivkey
	in
	[!Identity($server, ~serverprivkey, serverpubkey), In(<'client_hello', client, $server, clientpubkey>)]
	--[ServerCreateSession($server, client, sessionkey)]->
	[Session($server, client, sessionkey), Out(<'server_hello', $server, client, serverpubkey>)]

rule receive_Server_hello:
	let 
		sessionkey = serverpubkey^~clientprivkey
	in
    [ !Identity($client, ~clientprivkey, clientpubkey), In(<'server_hello', server, $client, serverpubkey>)  ]
  --[ClientCreateSession($client, server, sessionkey)]->
  	[ Session($client, server, sessionkey)  ]

lemma MIIM:
	
	"
	All client server sessionkey1 sessionkey2 #i #j .
	(
		ClientCreateSession(client, server, sessionkey1) @ #i &
		ServerCreateSession(server, client, sessionkey2) @ #j &
		#j< #i &
		not(client = server)
	)
	==> not(Ex #k1 #k2 . K(sessionkey1) @ #k1 & K(sessionkey2) @ #k2)
	"


end