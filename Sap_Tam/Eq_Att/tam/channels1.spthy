theory ChannelsTestOne
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: asymmetric-encryption

functions: penc/3, pdec/2

equations: pdec(penc(m, r, pk(skk)), skk)=m

heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule new_c_: // [process=top-level] new c 
 [State_(), Fr(c)] --[]-> [State_1(c)]

rule new_skk_1: // [process=top-level] new skk 
 [State_1(c), Fr(skk)] --[]-> [State_11(c, skk)]

rule out_pkskk_11: // [process=top-level] out pk(skk) 
 [State_11(c, skk)] --[]-> [State_111(c, skk), Out(pk(skk))]

rule in_a_111: // [process=top-level] in a 
 [State_111(c, skk), In(a)] --[]-> [State_1111(a, c, skk)]

rule in_b_1111: // [process=top-level] in b 
 [State_1111(a, c, skk), In(b)] --[]-> [State_11111(a, b, c, skk)]

rule Par_11111: // [process=top-level] Par 
 [State_11111(a, b, c, skk)] --[]-> [State_111111(a, b, c, skk), State_111112(a, b, c, skk)]

rule event_Secretdiffa_b_111111 [color=#569DC0]: // [process=P] event Secret(diff(a, b)) 
 [State_111111(a, b, c, skk)] --[Event(), Secret(diff(a, b))]-> [State_1111111(a, b, c, skk)]

rule out_c_diffa_b_0_1111111 [color=#569DC0]: // [process=P] out c,diff(a, b), 0 
 [State_1111111(a, b, c, skk), In(c)] --[ChannelInEvent(c)]-> [Out(diff(a, b)), State_11111111(a, b, c, skk)]

rule out_c_diffa_b_1_1111111 [color=#569DC0]: // [process=P] out c,diff(a, b), 1 
 [State_1111111(a, b, c, skk)] --[]-> [Semistate_1111111(a, b, c, skk), Message(c,diff(a, b))]

rule out_c_diffa_b_2_1111111 [color=#569DC0]: // [process=P] out c,diff(a, b), 2 
 [Semistate_1111111(a, b, c, skk), Ack(c,diff(a, b))] --[]-> [State_11111111(a, b, c, skk)]

rule Zero_11111111 [color=#569DC0]: // [process=P] Zero 
 [State_11111111(a, b, c, skk)] --[]-> []

rule in_c_x_0_111112 [color=#2CD719]: // [process=Q] in c,x, 0 
 [State_111112(a, b, c, skk), In(<c, x>)] --[ChannelInEvent(<c, x>)]-> [State_1111121(a, b, c, skk, x)]

rule in_c_x_1_111112 [color=#2CD719]: // [process=Q] in c,x, 1 
 [State_111112(a, b, c, skk), Message(c,x)] --[]-> [Ack(c,x), State_1111121(a, b, c, skk, x)]

rule new_r_1111121 [color=#2CD719]: // [process=Q] new r 
 [State_1111121(a, b, c, skk, x), Fr(r)] --[]-> [State_11111211(a, b, c, r, skk, x)]

rule event_Receivedx_11111211 [color=#2CD719]: // [process=Q] event Received(x) 
 [State_11111211(a, b, c, r, skk, x)] --[Event(), Received(x)]-> [State_111112111(a, b, c, r, skk, x)]

rule out_pencx_r_pkskk_111112111 [color=#2CD719]: // [process=Q] out penc(x, r, pk(skk)) 
 [State_111112111(a, b, c, r, skk, x)] --[]-> [State_1111121111(a, b, c, r, skk, x), Out(penc(x, r, pk(skk)))]

rule Zero_1111121111 [color=#2CD719]: // [process=Q] Zero 
 [State_1111121111(a, b, c, r, skk, x)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

lemma secret :
"	All x #i. ( Secret(x) @ i ==> not( Ex #j. K(x) @ j ) )"

lemma received : exists-trace
"	Ex x #i. Received(x) @ i"

end
