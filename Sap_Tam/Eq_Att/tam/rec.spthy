theory rec
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

//heuristic: p /* heuristic for SAPIC */

rule Init_: // [process=top-level] Init 
 [] --[Init()]-> [State_()]

rule Par_: // [process=top-level] Par 
 [State_()] --[]-> [State_1(), State_2()]

rule new_a_1: // [process=top-level] new a 
 [State_1(), Fr(a)] --[]-> [State_11(a)]

rule new_b_11: // [process=top-level] new b 
 [State_11(a), Fr(b)] --[]-> [State_111(a, b)]

rule out_c_diffa_b_0_111: // [process=top-level] out 'c',diff(a, b), 0 
 [State_111(a, b), In('c')] --[ChannelInEvent('c')]-> [Out(diff(a, b)), State_1111(a, b)]

rule out_c_diffa_b_1_111: // [process=top-level] out 'c',diff(a, b), 1 
 [State_111(a, b)] --[]-> [Semistate_111(a, b), Message('c',diff(a, b))]

rule out_c_diffa_b_2_111: // [process=top-level] out 'c',diff(a, b), 2 
 [Semistate_111(a, b), Ack('c',diff(a, b))] --[]-> [State_1111(a, b)]

rule Zero_1111: // [process=top-level] Zero 
 [State_1111(a, b)] --[]-> []

rule in_c_x_0_2: // [process=top-level] in c,x, 0 
 [State_2(), In(<c, x>)] --[ChannelInEvent(<c, x>)]-> [State_21(c, x)]

rule in_c_x_1_2: // [process=top-level] in c,x, 1 
 [State_2(), Message(c,x)] --[]-> [Ack(c,x), State_21(c, x)]

rule Zero_21: // [process=top-level] Zero 
 [State_21(c, x)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

end
