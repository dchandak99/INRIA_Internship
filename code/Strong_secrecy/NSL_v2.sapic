theory NSL

begin

builtins: asymmetric-encryption
functions: penc/3, pdec/2
equations: pdec(penc(m, r, pk(skk)), skk) = m

! ( in(Na_1); in(Na_2); 
        new ~skA; 
        event HonestA(pk(~skA));
        out(pk(~skA)); 				//xNa is like variable to A but actual value Na
        !( in(pk(~xB)); 
        //new Na; 
        new ~r;
        //event OUT_I_1(aenc(<diff(Na_1, Na_2), pk(~skA)>, pk(xB)));
        event OUT_I_1(penc(<diff(Na_1, Na_2), pk(~skA)>,~r, pk(~xB)));
        //out(aenc(<diff(Na_1, Na_2), pk(~skA)>,pk(xB)));
        out(penc(<diff(Na_1, Na_2), pk(~skA)>,~r,pk(~xB)));
        in(aenc(<diff(Na_1, Na_2), ~xNb,pk(~xB)>,pk(~skA))); 
        event IN_I_2_nr(~xNb,aenc(<diff(Na_1, Na_2),~xNb,pk(~xB)>,pk(~skA)));
        new ~k; out(aenc(<~xNb,~k>,pk(~xB)));   //new k for randomness
        event SessionA(pk(~skA),pk(~xB),~k)
        ) ) 
||
! ( new ~skB; 
        event HonestB(pk(~skB));
          out(pk(~skB));
        ! ( //in(aenc(<xNa,pk(xA)>,pk(~skB))); 
          in(penc(<xNa,pk(~xA)>,~xr,pk(~skB))); 
           event IN_R_1_ni(xNa,aenc(<xNa,pk(~xA)>,pk(~skB)));
           new ~Nb; 
           event OUT_R_1(aenc(<xNa,~Nb,pk(~skB)>,pk(~xA)));
           out(aenc(<xNa,~Nb,pk(~skB)>,pk(~xA)));
           in(aenc(<~Nb,~xk>,pk(~skB))); 
           event SessionB(pk(~xA),pk(~skB),~xk)
        )) 

lemma sanity1: //make sure that a valid protocol run exists 
 exists-trace 
      "Ex pka pkb k #t1 . SessionA(pka,pkb,k)@t1" 

lemma sanity2:  
 exists-trace 
      "Ex pka pkb k #t1 . SessionB(pka,pkb,k)@t1" 
/*
lemma source [sources, reuse]:
  " (All ni m1 #i.
       IN_R_1_ni( ni, m1) @ i
       ==>
       ( (Ex #j. KU(ni) @ j & j < i)
     //  | (Ex #j. OUT_I_1( m1 ) @ j)
       )
    )
  & (All n1 n2 #i.
    Got(n1, n2) @i 
    ==>
     (Ex #j. KU(n1) @ j & j < i)
    )
  & (All n1 n2 #i.
    Got(n1, n2) @i 
    ==>
     (Ex #j. KU(n2) @ j & j < i)
    )

  & (All nr m2 #i.
       IN_I_2_nr( nr, m2) @ i
       ==>
       ( (Ex #j. KU(nr) @ j & j < i)
       | (Ex #j. OUT_R_1( m2 ) @ j)
       )
    )
"*/

lemma secrecy:
        "not (
                Ex pka pkb k #t1 #t2 .
                 SessionA(pka,pkb,k)@t1            /* somebody claims to have setup a shared secret, */
                & K(k)@t2                          /* but the adversary knows it */
                & ( Ex #i . HonestA(pka)@i)        /* without having performed a long-term key reveal. */
                & ( Ex #i . HonestB(pkb)@i)
        )"

end


