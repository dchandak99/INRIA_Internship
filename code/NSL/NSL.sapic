theory NeedhamSchroeder

begin

builtins: asymmetric-encryption

! ( new skA; 
        event HonestA(pk(skA));
        out(pk(skA)); 				//xNa is like variable to A but actual value Na
        !( in(pk(xB)); 
        new Na; 
        event OUT_I_1(aenc(<Na,pk(skA)>,pk(xB)));
        out(aenc( <Na,pk(skA) > ,pk(xB)));
        in(aenc(<Na,xNb,pk(xB)>,pk(skA))); 
        event IN_I_2_nr(xNb,aenc(<Na,xNb,pk(xB)>,pk(skA)));
        new k; out(aenc(<xNb,k>,pk(xB)));   //new k for randomness
        event SessionA(pk(skA),pk(xB),k)
        ) ) 
||
! ( new skB; 
        event HonestB(pk(skB));
        out(pk(skB)); 
        !( in(aenc(<xNa,pk(xA)>,pk(skB))); 
           event IN_R_1_ni(xNa,aenc(<xNa,pk(xA)>,pk(skB)));
           new Nb; 
           event OUT_R_1(aenc(<xNa,Nb,pk(skB)>,pk(xA)));
           out(aenc(<xNa,Nb,pk(skB)>,pk(xA)));
           in(aenc(<Nb,xk>,pk(skB))); 
           event SessionB(pk(xA),pk(skB),xk)
        )) 

lemma sanity1: //make sure that a valid protocol run exists 
 exists-trace 
      "Ex pka pkb k #t1 . SessionA(pka,pkb,k)@t1" 

 lemma sanity2:  
 exists-trace 
      "Ex pka pkb k #t1 . SessionB(pka,pkb,k)@t1" 

lemma source [sources, reuse]:
  " (All ni m1 #i.
       IN_R_1_ni( ni, m1) @ i
       ==>
       ( (Ex #j. KU(ni) @ j & j < i)
       | (Ex #j. OUT_I_1( m1 ) @ j)
       )
    )
  & (All nr m2 #i.
       IN_I_2_nr( nr, m2) @ i
       ==>
       ( (Ex #j. KU(nr) @ j & j < i)
       | (Ex #j. OUT_R_1( m2 ) @ j)
       )
    )
"

lemma secrecy:
        "not (
                Ex pka pkb k #t1 #t2 .
                 SessionA(pka,pkb,k)@t1            /* somebody claims to have setup a shared secret, */
                & K(k)@t2                          /* but the adversary knows it */
                & ( Ex #i . HonestA(pka)@i)        /* if honest
                & ( Ex #i . HonestB(pkb)@i)
        )"

end


